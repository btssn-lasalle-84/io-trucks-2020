package com.lasalle.io_trucks;

import androidx.appcompat.app.AppCompatActivity;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.Button;

/**
 * @file Accueil.java
 * @author Mathieu Arthur
 * @version 0.1
 * @brief Déclaration de la classe Accueil
 */

/**
 * @class Accueil
 * @brief Classe de l'activité Accueil qui permet la connexion Bluetooth
 * @detail La classe Acceuil est l'activité de démarrage de l'application. Elle permet de gérer les bouton de connexion Bluetooth.
 */
public class Accueil extends AppCompatActivity implements View.OnClickListener
{
    /**
     * Constantes
     */
    private static final String TAG = "IHMACCEUIL";
    /**
     * Attributs
     */
    private Communication communicationBluetooth = new Communication();
    static private Peripherique peripheriqueBluetooth = null;
    private Button buttonBluetooth;
    private Button buttonBounded;
    private Button buttonTriangle;

    /**
     * @brief Méthode appelée à la création de l'activité Accueil
     *
     * @fn Accueil::onCreate(Bundle savedInstanceState)
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_accueil);
        Log.i(TAG,"onCreate()");

        recupererWidgets();

        initialiserWidgets();

        communicationBluetooth.demanderActivationBluetooth(this);

        creerLiasonReceiverEtatBluetooth();

        //creerLiaisonReceiverScanBluetooth();
    }

    /**
     * @fn onClick(View element)
     * @param element Désigne l'objet sur lequel est appliqué le clic
     * @detail Méthode qui s'exécute lors d'un clic sur un élément qui écoute cet évènement
     */
    @Override
    public void onClick(View element)
    {
        Log.i(TAG,"onClick()");
        if(element == buttonBluetooth)
        {
            Log.i(TAG,"clic sur " + buttonBluetooth.getText());
            //communicationBluetooth.demarrerDiscoveryBluetooth(Accueil.this);
            BluetoothDevice blueDevice = communicationBluetooth.recupererAppareilBluetooth("io-trucks");
<<<<<<< .mine
            if(blueDevice == null)
||||||| .r10
            if(peripheriqueBluetooth == null)
                peripheriqueBluetooth = new Peripherique(blueDevice, handler);
            if(!peripheriqueBluetooth.estConnecte())
=======
            if(peripheriqueBluetooth == null)
               peripheriqueBluetooth = new Peripherique(blueDevice, handler);
            if(!peripheriqueBluetooth.estConnecte())
>>>>>>> .r11
            {
                /**
                 * @todo afficher une boîte de dialogue :  appareil io-trucks non trouvé !
                 */
                Log.i(TAG,"Appareil io-trucks non trouvé !");

                if(peripheriqueBluetooth.getEstConnecter())
                {
                    Log.v(TAG,"getEstConnecter()");
                    buttonBluetooth.setText("Deconnecter");
                    Intent intent = new Intent(this, MainActivity.class);
                    startActivity(intent);
                }
            }
            else
            {
<<<<<<< .mine
                if (peripheriqueBluetooth == null)
                    peripheriqueBluetooth = new Peripherique(blueDevice, handler);
                if (!peripheriqueBluetooth.estConnecte())
                {
                    peripheriqueBluetooth.connecter();
                }
                else
                {
                    peripheriqueBluetooth.deconnecter();
                    peripheriqueBluetooth.connecter();
                }
||||||| .r10
                peripheriqueBluetooth.deconnecter();
                peripheriqueBluetooth.connecter();
=======
                peripheriqueBluetooth.deconnecter();
                //peripheriqueBluetooth.connecter();
                buttonBluetooth.setText("Connecter");
>>>>>>> .r11
            }
        }
        else if(element == buttonBounded)
        {
            communicationBluetooth.rechercherAppareilConnu(this);
        }
        else if(element == buttonTriangle)
        {
            peripheriqueBluetooth.envoyer("$iotruck;T;1\r\n");
        }
    }

    /**
     * @fn recupererWidgets()
     * @detail Méthode pour associer la vue à l'objet des Widgets
     */
    private void recupererWidgets()
    {
        buttonBluetooth = findViewById(R.id.buttonConnecter);
        buttonBounded = findViewById(R.id.buttonBounded);
        buttonTriangle = findViewById(R.id.buttonTriangle);
    }

    /**
     * @fn initialiserWidgets()
     * @detail Méthode pour initialiser les Widgets
     */
    private void initialiserWidgets()
    {
        buttonBluetooth.setOnClickListener(this);
        buttonBounded.setOnClickListener(this);
        buttonTriangle.setOnClickListener(this);
    }

    public Peripherique getPeripherique()
    {
        return peripheriqueBluetooth;
    }


    /**
     * @fn creerRegisterScanBluetooth()
     * @detail Méthode pour créer les Registers du scan
     */
    /*private void creerLiaisonReceiverScanBluetooth()
    {
        IntentFilter filterScan = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        filterScan.addAction(BluetoothDevice.ACTION_FOUND);
        filterScan.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
        filterScan.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
        registerReceiver(communicationBluetooth.scanBluetooth(), filterScan);

        //communicationBluetooth.demarrerDiscoveryBluetooth(this);
    }*/

    /**
     * @fn creerRegisterEtatBluetooth()
     * @detail Méthode pour créer les Registers de l'état du bluetooth
     */
    private void creerLiasonReceiverEtatBluetooth()
    {
        IntentFilter filter = new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED);
        registerReceiver(communicationBluetooth.ecouterEtatBluetooth(), filter);
    }

    /**
     * @brief Méthode appelée à la destruction de l'application
     */
    @Override
    protected void onDestroy()
    {
        Log.i(TAG,"onDestroy()");
        communicationBluetooth.unregisterBluetooth(this);
        super.onDestroy();
    }

    final private Handler handler = new Handler()
    {
        @Override
public void handleMessage(Message msg)
{
    super.handleMessage(msg);

    switch(msg.what)
    {
        case Peripherique.CODE_CONNEXION:
            Log.v(TAG, "io-trucks connecté");
            break;
        case Peripherique.CODE_RECEPTION:
            Log.v(TAG, "io-trucks réception : " + (String)msg.obj);
            break;
        case Peripherique.CODE_DECONNEXION:
            Log.v(TAG, "io-trucks déconnecté");
            break;
    }
}
};
}
